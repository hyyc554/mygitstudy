=============================================================================================
# 老男孩教育：                                                                            #
# www.oldboyedu.com                                                                       #
# 邮件：miaokm@oldboyedu.com(189 1048 1057)                                               #
# 地址：北京市昌平区顺沙路8号院汇德商厦4F                                                 #
# 资源老师   手机电话：		    QQ号码        资源老师： 手机电话：		    QQ号码        #
# 飞雪		 135 5261 2571		80042789      小雨		 186 0046 2391      390320151     #
# 歪歪		 189 1171 8229		70271111      丹丹		 158 1059 0206      41117397      #
# 冰冰		 150 1078 5220		41117483												  #
=============================================================================================

磁盘接口
SAS 15k 300G 600G  
    10k 1.6t
	7.2k  8TB 
SATA  10k 
PCI-E 固态硬盘 

raid 0 1 5 10 
raid 0    需要几块硬盘  至少1块硬盘       拥有最高的读写速度               磁盘空间没有被浪费     只要坏了一块 
raid 1                  只能是2块硬盘     读的速度还可以相当于是一块硬盘   磁盘空间被浪费了一半   可以损坏一块
raid 5                  至少需要3块硬盘   读的速度ok，写入的速度比较慢     损失一块硬盘的容量     最多可以损坏一块
raid 10                 至少需要4块硬盘   读写速度都很快                   损失了一半             最多损坏一半
                        硬盘的数量必须是偶数
raid 0    追求性能 不需要保证数据的安全   MySQL slave 数据库从库
raid 1    安全性   对性能要求不高 对安全要求高
raid 5    性能有（读） 安全性（最多可以坏一块）  容量（损失一块硬盘）   对于性能要求不高 用户并发比较小 
raid 10   贵  性能 安全性  数据库的主库





磁盘
磁盘接口
常用的raid级别
/boot swap   / 
/boot swap   /  /data 
/boot swap   /  剩余的留着不分
linux分区的工具:fdisk parted 
格式化 挂载与使用 
常用的文件系统

服务外观简介
远程控制卡的配置与使用
远程控制卡制作raid

sed 
shell编程：入门 
awk







0磁头0磁道1扇区 512字节 

512字节=MBR+GPT
MBR主引导记录引导系统启动 

GPT磁盘分区表
GPT=64字节分区表+2字节的结束标记





主分区  一个主分区占用分区表中的16个字节

扩展分区 为了解决磁盘最多只能有4个主分区的缺点
         扩展分区占用16个字节的分区表 
		 只能有一个。
         没有办法直接使用的，必须在扩展分区中创建逻辑分区
		 

[root@oldboyedu-39-nb ~]# ll /dev/sda
brw-rw---- 1 root disk 8, 0 Aug  6 00:32 /dev/sda
[root@oldboyedu-39-nb ~]# dd if=/dev/sda of=/tmp/mbr.bin bs=512 count=1
1+0 records in
1+0 records out
512 bytes (512 B) copied, 0.000439686 s, 1.2 MB/s
[root@oldboyedu-39-nb ~]# 
[root@oldboyedu-39-nb ~]# ll /tmp/mbr.bin 
-rw-r--r-- 1 root root 512 Aug 15 09:23 /tmp/mbr.bin
[root@oldboyedu-39-nb ~]# file /tmp/mbr.bin 
/tmp/mbr.bin: x86 boot sector; GRand Unified Bootloader, stage1 version 0x3, boot drive 0x80, 1st sector stage2 0x6280, GRUB version 0.94; partition 1: ID=0x83, active, starthead 32, startsector 2048, 409600 sectors; partition 2: ID=0x82, starthead 159, startsector 411648, 1572864 sectors; partition 3: ID=0x83, starthead 135, startsector 1984512, 18987008 sectors, code offset 0x48
[root@oldboyedu-39-nb ~]# od -xa /tmp/mbr.bin 
0000000    48eb    1090    d08e    00bc    b8b0    0000    d88e    c08e
          k   H dle dle  so   P   < nul   0   8 nul nul  so   X  so   @
0000020    befb    7c00    00bf    b906    0200    a4f3    21ea    0006
          {   > nul   |   ? nul ack   9 nul stx   s   $   j   ! ack nul
0000040    be00    07be    0438    0b75    c683    8110    fefe    7507
        nul   >   > bel   8 eot   u  vt etx   F dle soh   ~   ~ bel   u
0000060    ebf3    b416    b002    bb01    7c00    80b2    748a    0203
          s   k syn   4 stx   0 soh   ; nul   |   2 nul  nl   t etx stx
0000100    0080    8000    6280    0000    0800    90fa    f690    80c2
        nul nul nul nul nul   b nul nul nul  bs   z dle dle   v   B nul
0000120    0275    80b2    59ea    007c    3100    8ec0    8ed8    bcd0
          u stx   2 nul   j   Y   | nul nul   1   @  so   X  so   P   <
0000140    2000    a0fb    7c40    ff3c    0274    c288    f652    80c2
        nul  sp   {  sp   @   |   < del   t stx  bs   B   R   v   B nul
0000160    5474    41b4    aabb    cd55    5a13    7252    8149    55fb
          t   T   4   A   ;   *   U   M dc3   Z   R   r   I soh   {   U
0000200    75aa    a043    7c41    c084    0575    e183    7401    6637
          *   u   C  sp   A   | eot   @   u enq etx   a soh   t   7   f
0000220    4c8b    be10    7c05    44c6    01ff    8b66    441e    c77c
         vt   L dle   > enq   |   F   D del soh   f  vt  rs   D   |   G
0000240    1004    c700    0244    0001    8966    085c    44c7    0006
        eot dle nul   G   D stx soh nul   f  ht   \  bs   G   D ack nul
0000260    6670    c031    4489    6604    4489    b40c    cd42    7213
          p   f   1   @  ht   D eot   f  ht   D  ff   4   B   M dc3   r
0000300    bb05    7000    7deb    08b4    13cd    0a73    c2f6    0f80
        enq   ; nul   p   k   }   4  bs   M dc3   s  nl   v   B nul  si
0000320    f084    e900    008d    05be    c67c    ff44    6600    c031
        eot   p nul   i  cr nul   > enq   |   F   D del nul   f   1   @
0000340    f088    6640    4489    3104    88d2    c1ca    02e2    e888
         bs   p   @   f  ht   D eot   1   R  bs   J   A   b stx  bs   h
0000360    f488    8940    0844    c031    d088    e8c0    6602    0489
         bs   t   @  ht   D  bs   1   @  bs   P   @   h stx   f  ht eot
0000400    a166    7c44    3166    66d2    34f7    5488    660a    d231
          f   !   D   |   f   1   R   f   w   4  bs   T  nl   f   1   R
0000420    f766    0474    5488    890b    0c44    443b    7d08    8a3c
          f   w   t eot  bs   T  vt  ht   D  ff   ;   D  bs   }   <  nl
0000440    0d54    e2c0    8a06    0a4c    c1fe    d108    6c8a    5a0c
          T  cr   @   b ack  nl   L  nl   ~   A  bs   Q  nl   l  ff   Z
0000460    748a    bb0b    7000    c38e    db31    01b8    cd02    7213
         nl   t  vt   ; nul   p  so   C   1   [   8 soh stx   M dc3   r
0000500    8c2a    8ec3    4806    607c    b91e    0100    db8e    f631
          *  ff   C  so ack   H   |   `  rs   9 nul soh  so   [   1   v
0000520    ff31    f3fc    1fa5    ff61    4226    be7c    7d7f    40e8
          1 del   |   s   %  us   a del   &   B   |   > del   }   h   @
0000540    eb00    be0e    7d84    38e8    eb00    be06    7d8e    30e8
        nul   k  so   > eot   }   h   8 nul   k ack   >  so   }   h   0
0000560    be00    7d93    2ae8    eb00    47fe    5552    2042    4700
        nul   > dc3   }   h   * nul   k   ~   G   R   U   B  sp nul   G
0000600    6f65    006d    6148    6472    4420    7369    006b    6552
          e   o   m nul   H   a   r   d  sp   D   i   s   k nul   R   e
0000620    6461    2000    7245    6f72    0072    01bb    b400    cd0e
          a   d nul  sp   E   r   r   o   r nul   ; soh nul   4  so   M
0000640    ac10    003c    f475    00c3    0000    0000    0000    0000
        dle   ,   < nul   u   t   C nul nul nul nul nul nul nul nul nul
0000660    0000    0000    0000    0000    6a50    0000    0000    2080
        nul nul nul nul nul nul nul nul   P   j nul nul nul nul nul  sp
0000700    0021    9f83    1906    0800    0000    4000    0006    9f00
          ! nul etx  us ack  em nul  bs nul nul nul   @ ack nul nul  us
0000720    1907    8782    7b0c    4800    0006    0000    0018    8700
        bel  em stx bel  ff   { nul   H ack nul nul nul can nul nul bel
0000740    7b0d    fe83    ffff    4800    001e    b800    0121    0000
         cr   { etx   ~ del del nul   H  rs nul nul   8   ! soh nul nul
0000760    0000    0000    0000    0000    0000    0000    0000    aa55
        nul nul nul nul nul nul nul nul nul nul nul nul nul nul   U   *
0001000

主分区：
磁盘中最多有四个。

扩展分区Extended
不能直接使用，必须在扩展分区下面创建逻辑分区。


/boot 
swap 
/ 
/data_pic
/data_video 


逻辑分区 
你必须创建了 扩展分区 才会有逻辑分区

磁盘名字命名规则 
/dev/sd?
sas/sata/scsi   ====== 硬盘名字叫 sd?

系统中第一块硬盘  sas 
/dev/sda  
系统中第二块硬盘  sas 
/dev/sdb


分区名字命名规则
主分区和扩展分区是从数字1开始到4

/dev/sda1
/dev/sda2
/dev/sda3

逻辑分区 数字是从5开始
/dev/sda6

第二块SAS硬盘的第一个逻辑分区
/dev/sdb5
第三块SATA硬盘的第二个逻辑分区
/dev/sdc6


准备：
给虚拟机添加两块硬盘100M (0.1G) 

fdisk  给小于2TB磁盘进行分区（MBR）


parted 给大于2TB磁盘进行分区（GPT 小于2TB也可以用）

fdisk  给小于2TB磁盘进行分区（MBR）
100M 创建一个50M主分区 ，创建一个20M逻辑分区

fdisk -cu /dev/sdb


   d   delete a partition                     ###删除一个分区
   m   print this menu					      ###显示帮助
   n   add a new partition					  ###创建一个新的分区  new 
   p   print the partition table              ###显示当前分区信息（显示分区表信息）print
   q   quit without saving changes            ###退出不保存
   w   write table to disk and exit           ###退出保存 

###对/dev/sdb进行分区
fdisk -cu /dev/sdb

####创建主分区
Command (m for help): n
Command action
   e   extended
   p   primary partition (1-4)
p                                                     
Partition number (1-4): 1
First sector (2048-208895, default 2048): 
Using default value 2048
Last sector, +sectors or +size{K,M,G} (2048-208895, default 208895): +50M

Command (m for help): p

Disk /dev/sdb: 106 MB, 106954752 bytes
64 heads, 32 sectors/track, 102 cylinders, total 208896 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x0c7ada8f

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1            2048      104447       51200   83  Linux

####创建扩展分区
Command (m for help): n
Command action
   e   extended
   p   primary partition (1-4)
e
Partition number (1-4): 2
#####剩余空间都给扩展分区
First sector (104448-208895, default 104448): 
Using default value 104448
Last sector, +sectors or +size{K,M,G} (104448-208895, default 208895): 
Using default value 208895

#####扩展分区创建完成
Command (m for help): p

Disk /dev/sdb: 106 MB, 106954752 bytes
64 heads, 32 sectors/track, 102 cylinders, total 208896 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x0c7ada8f

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1            2048      104447       51200   83  Linux
/dev/sdb2          104448      208895       52224    5  Extended

#####创建逻辑分区
Command (m for help): n
Command action
   l   logical (5 or over)
   p   primary partition (1-4)
l
First sector (106496-208895, default 106496): 
Using default value 106496
Last sector, +sectors or +size{K,M,G} (106496-208895, default 208895): +20M

Command (m for help): p

Disk /dev/sdb: 106 MB, 106954752 bytes
64 heads, 32 sectors/track, 102 cylinders, total 208896 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x0c7ada8f

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1            2048      104447       51200   83  Linux
/dev/sdb2          104448      208895       52224    5  Extended
/dev/sdb5          106496      147455       20480   83  Linux



把磁盘sdb的容量用了创建一个分区 /dev/sdb1 ,把这个分区挂载到/mnt 
有了硬盘，分区，格式化创建文件系统，挂载

#####第一个里程碑-创建分区

Command (m for help): p

Disk /dev/sdb: 106 MB, 106954752 bytes
64 heads, 32 sectors/track, 102 cylinders, total 208896 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x0c7ada8f

   Device Boot      Start         End      Blocks   Id  System

Command (m for help): n
Command action
   e   extended
   p   primary partition (1-4)
p
Partition number (1-4): 1
First sector (2048-208895, default 2048): 
Using default value 2048
Last sector, +sectors or +size{K,M,G} (2048-208895, default 208895): 
Using default value 208895

Command (m for help): p

Disk /dev/sdb: 106 MB, 106954752 bytes
64 heads, 32 sectors/track, 102 cylinders, total 208896 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x0c7ada8f

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1            2048      208895      103424   83  Linux
Command (m for help): w
The partition table has been altered!

Calling ioctl() to re-read partition table.
Syncing disks.


#####第二个里程碑-通知系统 /dev/sdb磁盘的分区表修改了  变化了
partprobe /dev/sdb

#####第三个里程碑-格式化创建文件系统 
mkfs.ext4 /dev/sdb1

mke2fs 1.41.12 (17-May-2010)
Filesystem label=
OS type: Linux
Block size=1024 (log=0)
Fragment size=1024 (log=0)
Stride=0 blocks, Stripe width=0 blocks
25896 inodes, 103424 blocks
5171 blocks (5.00%) reserved for the super user
First data block=1
Maximum filesystem blocks=67371008
13 block groups
8192 blocks per group, 8192 fragments per group
1992 inodes per group
Superblock backups stored on blocks: 
	8193, 24577, 40961, 57345, 73729

Writing inode tables: done                            
Creating journal (4096 blocks): done
Writing superblocks and filesystem accounting information: done

This filesystem will be automatically checked every 21 mounts or
180 days, whichever comes first.  Use tune2fs -c or -i to override.

####第四个里程碑-让系统不对我们新创建的分区 进行磁盘检查
[root@oldboyedu-39-nb ~]# tune2fs -c 0 -i 0  /dev/sdb1 
tune2fs 1.41.12 (17-May-2010)
Setting maximal mount count to -1
Setting interval between checks to 0 seconds

####第五个里程碑-挂载 与检查 
[root@oldboyedu-39-nb ~]# mount /dev/sdb1 /mnt/
[root@oldboyedu-39-nb ~]# df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/sda3       8.8G  1.7G  6.8G  20% /
tmpfs           931M     0  931M   0% /dev/shm
/dev/sda1       190M   40M  141M  22% /boot
/dev/sdb1        94M  1.6M   88M   2% /mnt

####第六个里程碑-需要永久挂载  开机自动挂载

#1. 方法一----挂载命令放入到  /etc/rc.local 文件中
/bin/mount /dev/sdb1 /mnt/
#2. 方法二----/etc/fstab

UUID=284073cc-8366-4643-9a19-018882bc72dc /                       ext4    defaults        1 1

第一列：磁盘分区的名字或uuid
第二列：挂载到哪里  挂载点
第三列：文件系统的类型 
第四列：挂载参数 
第五列：是否对分区进行dump备份  1表示进行备份  0表示不备份
第六列：是否进行磁盘检查 

[root@oldboyedu-39-nb ~]# tail -2 /etc/fstab
proc                    /proc                   proc    defaults        0 0
#/dev/sdb1              /mnt                    ext4    defaults        0 


##parted 进行分区 2tb以上的磁盘（gpt）


  help [COMMAND]                           print general help, or help on COMMAND
  mklabel,mktable LABEL-TYPE               create a new disklabel (partition table)
                                           创建分区表gpt  msdos(mbr)
  mkpart PART-TYPE [FS-TYPE] START END     make a partition  创建分区 
  print [devices|free|list,all|NUMBER]     display the partition table, available devices, free space, all found partitions, or a particular partition                 
                                           显示分区信息
										   
  quit                                     exit program 退出 
										
  rm NUMBER                                delete partition NUMBER   删除一个分区  


####创建gpt分区表 
(parted) p
Error: /dev/sdc: unrecognised disk label                                  
(parted) mklabel gpt                                                      
(parted) p                                                                
Model: VMware, VMware Virtual S (scsi)
Disk /dev/sdc: 107MB
Sector size (logical/physical): 512B/512B
Partition Table: gpt

Number  Start  End  Size  File system  Name  Flags

(parted) mkpart primary 0  50                                             
Warning: The resulting partition is not properly aligned for best performance.
Ignore/Cancel? I
(parted) p                                                                
Model: VMware, VMware Virtual S (scsi)
Disk /dev/sdc: 107MB
Sector size (logical/physical): 512B/512B
Partition Table: gpt

Number  Start   End     Size    File system  Name     Flags
 1      17.4kB  50.0MB  50.0MB               primary


###fdisk  主要用了给小于2TB磁盘分区
###parted 主要用来给大于2TB磁盘分区（小于2TB）

 
 
 



 
 
 

企业案例：java环境内存不够用
swap在工作中，特别是java环境，程序写的有问题，会发生内存泄漏，可能会占用swap。
协调让开发改程序，运维可以临时增大swap。

 使用文件创建swap
dd if=/dev/zero of=/tmp/swap bs=1M count=128

mkswap /tmp/swap
free -h
swapon /tmp/swap
free -h

swapon -s 

swapoff /dev/sdb1
swapoff /tmp/swap

swapon -s #显示磁盘swap使用情况。

#创建一个块文件 
[root@oldboyedu-39-nb ~]# 
[root@oldboyedu-39-nb ~]# dd  if=/dev/zero of=/tmp/100m  bs=1M count=100
100+0 records in
100+0 records out
104857600 bytes (105 MB) copied, 0.472237 s, 222 MB/s
[root@oldboyedu-39-nb ~]# ll /tmp/100m  -h
-rw-r--r-- 1 root root 100M Aug 15 11:57 /tmp/100m
##让这个文件成为swap 类型
[root@oldboyedu-39-nb ~]# mkswap /tmp/100m 
mkswap: /tmp/100m: warning: don't erase bootbits sectors
        on whole disk. Use -f to force.
Setting up swapspace version 1, size = 102396 KiB
no label, UUID=f6a2d730-a364-4e43-a084-f5496fc77fbb
###让这个swap类型的文件 真的的加入到swap中  
[root@oldboyedu-39-nb ~]# swapon /tmp/100m 
[root@oldboyedu-39-nb ~]# free -h
             total       used       free     shared    buffers     cached
Mem:          1.8G       256M       1.6G       240K        11M       151M
-/+ buffers/cache:        92M       1.7G
Swap:         867M         0B       867M

预习 
1.磁盘文件系统
2.sed命令 
http://blog.oldboyedu.com/commands-sed/


文件系统

文件系统细节
1.文件属性信息 inode 
2.数据文件 block 

3.superblock 超级块 存放的是文件系统的信息：
             inode一共有多少 剩余多少  
			 block一共有多少 剩余多少
[root@oldboyedu-39-nb ~]# dumpe2fs -h  /dev/sda3 
dumpe2fs 1.41.12 (17-May-2010)
Filesystem volume name:   <none>
Last mounted on:          /
Filesystem UUID:          284073cc-8366-4643-9a19-018882bc72dc
Filesystem magic number:  0xEF53
Filesystem revision #:    1 (dynamic)
Filesystem features:      has_journal ext_attr resize_inode dir_index filetype needs_recovery extent flex_bg sparse_super large_file huge_file uninit_bg dir_nlink extra_isize
Filesystem flags:         signed_directory_hash 
Default mount options:    user_xattr acl
Filesystem state:         clean
Errors behavior:          Continue
Filesystem OS type:       Linux
Inode count:              593344
Block count:              2373376
Reserved block count:     118668
Free blocks:              1852332
Free inodes:              502203
First block:              0
Block size:               4096
Fragment size:            4096
Reserved GDT blocks:      579
Blocks per group:         32768
Fragments per group:      32768
Inodes per group:         8128
Inode blocks per group:   508
Flex block group size:    16
Filesystem created:       Fri Jul 14 10:53:45 2017
Last mount time:          Tue Aug 15 19:02:48 2017
Last write time:          Fri Jul 14 11:16:08 2017
Mount count:              8
Maximum mount count:      -1
Last checked:             Fri Jul 14 10:53:45 2017
Check interval:           0 (<none>)
Lifetime writes:          2396 MB
Reserved blocks uid:      0 (user root)
Reserved blocks gid:      0 (group root)
First inode:              11
Inode size:	          256
Required extra isize:     28
Desired extra isize:      28
Journal inode:            8
Default directory hash:   half_md4
Directory Hash Seed:      d897e384-9382-4a20-bc06-21af0ad4ed82
Journal backup:           inode blocks
Journal features:         journal_incompat_revoke
Journal size:             128M
Journal length:           32768
Journal sequence:         0x00003a2c
Journal start:            1

文件系统小结：
1.文件系统是对一个存储设备上的数据和元数据进行组织的一种机制。
2.分区必须格式化创建文件系统才能存放数据。
mkfs====make filesystem 

3.一个分区只能有一种文件系统。

4.linux下常见文件系统ext2、ext3、ext4、zfs、xfs（Centos7）和Reiserfs（单独安装）。windows下常见文件系统NTFS,FAT32,exFAT。 

文件系统的选择 
使用默认的即可。

1.2.1.1	SAS/SATA硬盘文件系统选择：
?	reiserfs大量小文件业务首选reiserfs（100K以内）, 单独安装。
?	xfs有的门户的数据库MySQL业务会选择xfs。
?	ext4 视频下载，流媒体，数据库，小文件业务也OK，可以用默认的。
?	ext2 没有日志，蓝汛的cache业务，CDN网站加速服务的。

Ext4/Reiserfs可以作为SSD文件系统，但未对SSD做优化，不能充分发挥SSD性能，并影响SSD使用时间。

总结：
1.磁盘组成-扇区-柱面-磁道
2.磁盘接口-SAS     15k  10k  7.2k 
          -SATA     
		  -PCI-E    
3.raid 0 1 5 10 
4.分区-格式化-挂载-永久挂载
5.系统的mbr的位置 ，主分区 扩展分区 逻辑分区 
6.文件系统 常用的文件系统 ext3 ext4 xfs reiserfs  
7.一大波命令 







（企业面试题：一台服务器6块600G的磁盘，raid5后，总大小3T，此时无法装系统？请问为什么？

解决办法：
方法1：做raid5后，不要重启装系统，而是再raid界面，继续分1个小的虚拟磁盘vd 200G，用这个200G的虚拟磁盘装系统，装完系统后再把剩余的2.8T分区通过parted）。
方法2：先拿1块盘raid0，剩下5块在做raid5，在raid0上装系统。
方法3：装系统时（centos6.x），会默认变化分区表为gpt.即可安装系统。

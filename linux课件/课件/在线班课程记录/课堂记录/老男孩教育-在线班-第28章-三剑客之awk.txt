=============================================================================================
# 老男孩教育：                                                                            #
# www.oldboyedu.com                                                                       #
# 邮件：miaokm@oldboyedu.com(189 1048 1057)                                               #
# 地址：北京市昌平区顺沙路8号院汇德商厦4F                                                 #
# 资源老师   手机电话：		    QQ号码        资源老师： 手机电话：		    QQ号码        #
# 飞雪		 135 5261 2571		80042789      小雨		 186 0046 2391      390320151     #
# 歪歪		 189 1171 8229		70271111      丹丹		 158 1059 0206      41117397      #
# 冰冰		 150 1078 5220		41117483												  #
=============================================================================================

awk 
1.处理文件的过程 awk的执行过程                       ******

2.字段（列）

3. sed '找谁干啥' '条件命令'   awk中 '条件{动作}'
awk 'NR==2{print $2}'
 
模式 pattern=====条件=====找谁                       ******
1）通过正则表达式                                    ******  
2）表示比较  
找出20行到文件的结尾
awk 'NR>=20' reg.txt 
3）范围：从哪里来,到哪里去                           ******

4）特殊的条件/模式: 
BEGIN   
END                                                  ******
4.awk的数组                                          ******



######
#####1.处理文件的过程 awk的执行过程   
 head /etc/passwd >passwd.txt
[root@oldboyedu-39-nb ~]# ##找出顺手的菜刀 武器 分隔符
[root@oldboyedu-39-nb ~]# awk -F: 'NR==2' passwd.txt 
bin:x:1:1:bin:/bin:/sbin/nologin
[root@oldboyedu-39-nb ~]# awk -F: 'NR==2{print $1,$2}' passwd.txt 
bin x


条件{动作}

条件就是awk花括号外面的内容。

awk 'NR>=2{print $0}'
a)	awk读入第一行内容
b)	判断是否符合模式中的条件NR>=2(是否让你进入大门中)
	如果匹配默则执行对应的动作{print $0}
	如果不匹配条件，继续读取下一行 
c)	继续读取下一行
d)	重复过程a)-c),直到读取到最后一行(EOF:end of file )


######2.我们重新认识awk
#1)取某一列 
#2)统计/计算 谁在破解你的密码   统计出你这个网站 每个用户每一段时间访问了多少次  统计出群里撤回消息最多的人 
#3）名字怪异的一门语言 


######3.字段（列） field

##1)awk每一列默认通过_空格 连续出现的空格 __分割
##2）FS field separator 每一列的分隔符  字段分隔符 ==== awk -F 实际上就是在修改FS里面的内容
##3） -v用途  定义/修改一个变量
##4）NF number of fields 内容是这一行中有多少列    $NF最后一列 


[root@oldboyedu-39-nb ~]# awk -F: 'NR==2{print $1,$2}' passwd.txt 
bin x
[root@oldboyedu-39-nb ~]# ###修改FS变量的内容 
[root@oldboyedu-39-nb ~]# awk -vFS=":" 'NR==2{print $1,$2}' passwd.txt 
bin x

###eg:显示文件passwd.txt中每一行的第一列和第三列，显示的时候中间通过#分割。
root#0 
oldboy#500 

[root@oldboyedu-39-nb ~]# awk -F: -vOFS="#" '{print $1"#"$3}' passwd.txt 
root#0
bin#1
daemon#2
adm#3
lp#4
sync#5
shutdown#6
halt#7
mail#8
uucp#10
[root@oldboyedu-39-nb ~]# awk -vFS=":"  OFS="#" '{print $1"#"$3}' passwd.txt 
awk: cmd. line:1: OFS=#
awk: cmd. line:1:     ^ syntax error
[root@oldboyedu-39-nb ~]# awk -vFS=":"  -vOFS="#" '{print $1"#"$3}' passwd.txt 
root#0
bin#1
daemon#2
adm#3
lp#4
sync#5
shutdown#6
halt#7
mail#8
uucp#10



#####4.awk中的条件------正则表达式作为条件
###1）正则表达式的符号
^      某一个部分/列开头 以....开头 
$      某一个部分/列结尾 以....结尾

^$
.
*
.*
[]
[^]

+
|
()

{}
?

###2）awk中如何使用正表达式
##   ~   匹配/包含/含有
###  $NF~/nologin/ 最后一列中含有nologin的单词
##  /nologin/ ==== $0~/nologin/    这一行中含有nologin
####$0 一整行 这一行的内容 

[root@oldboyedu-39-nb ~]# awk '最后一列包含bash' passwd.txt 
awk: 最后一列包含bash
awk: ^ invalid char '䥠in expression
[root@oldboyedu-39-nb ~]# awk '$NF~/bash/' passwd.txt 
root:x:0:0:root:/root:/bin/bash
[root@oldboyedu-39-nb ~]# awk '$NF~/nologin/' passwd.txt 
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin



mkdir -p /server/files/
cat >>/server/files/reg.txt<<EOF
Zhang Dandan    41117397   :250:100:175
Zhang Xiaoyu    390320151  :155:90:201
Meng  Feixue    80042789   :250:60:50
Wu    Waiwai    70271111   :250:80:75
Liu   Bingbing  41117483   :250:100:175
Wang  Xiaoai    3515064655 :50:95:135
Zi    Gege      1986787350 :250:168:200
Li    Youjiu    918391635  :175:75:300
Lao   Nanhai    918391635  :250:100:175
EOF


###awk正则表达式练习题 

显示Xiaoyu的姓氏和ID号码
姓氏是Zhang的人，显示他的第二次捐款金额及她的名字
显示所有以41开头的ID号码的人的全名和ID号码
显示所有ID号码最后一位数字是1或5的人的全名
显示Xiaoyu的捐款.每个值时都有以$开头.如$520$200$135 

##显示Xiaoyu的姓氏和ID号码
[root@oldboyedu-39-nb files]# cat reg.txt 
Zhang Dandan    41117397   :250:100:175
Zhang Xiaoyu    390320151  :155:90:201
Meng  Feixue    80042789   :250:60:50
Wu    Waiwai    70271111   :250:80:75
Liu   Bingbing  41117483   :250:100:175
Wang  Xiaoai    3515064655 :50:95:135
Zi    Gege      1986787350 :250:168:200
Li    Youjiu    918391635  :175:75:300
Lao   Nanhai    918391635  :250:100:175
[root@oldboyedu-39-nb files]# awk '$2~/Xiaoyu/' reg.txt 
Zhang Xiaoyu    390320151  :155:90:201
[root@oldboyedu-39-nb files]# awk '$2~/Xiaoyu/{print $1,$3}' reg.txt 
Zhang 390320151

[root@oldboyedu-39-nb files]# 
[root@oldboyedu-39-nb files]# awk '/Xiaoyu/{print $1,$3}' reg.txt 
Zhang 390320151





##姓氏是Zhang的人，显示他的第二次捐款金额及她的名字
[root@oldboyedu-39-nb files]# awk '$1~/Zhang/' reg.txt 
Zhang Dandan    41117397   :250:100:175
Zhang Xiaoyu    390320151  :155:90:201
[root@oldboyedu-39-nb files]# awk -F"[ :]+" '$1~/Zhang/{print $1,$2,$5}' reg.txt 
Zhang Dandan 100
Zhang Xiaoyu 90
[root@oldboyedu-39-nb files]# awk -F"[ :]+" '$1~/Zhang/{print $1,$2,$NF}' reg.txt 
[root@oldboyedu-39-nb files]# awk -F"[ :]+" '$1~/Zhang/{print $1,$2,$(NF-1)}' reg.txt 
Zhang Dandan 100
Zhang Xiaoyu 90


###()表示先执行 括号里面的内容  然后 再给$符号使用 取某一列

awk -F "[ :]+" '$1~/zhang/{print $1,$(NF-1)}' /server/files/reg.txt



##显示所有以41开头的ID号码的人的全名和ID号码
####条件{动作}
######条件：找出以41开头的ID号码
######动作：显示全名和ID

[root@oldboyedu-39-nb files]# ##显示所有以41开头的ID号码的人的全名和ID号码
[root@oldboyedu-39-nb files]# awk '/^41/' reg.txt 
[root@oldboyedu-39-nb files]# awk '$3~/^41/' reg.txt 
Zhang Dandan    41117397   :250:100:175
Liu   Bingbing  41117483   :250:100:175
[root@oldboyedu-39-nb files]# awk '$3~/^41/{print $1,$2,$3}' reg.txt 
Zhang Dandan 41117397
Liu Bingbing 41117483


$3~/41/{print $1,$2,$3}


##显示所有ID号码的最后一位数字是1或5的人的全名
###条件是 第三列以1或5结尾 
###动作   显示 全名 
[root@oldboyedu-39-nb files]# awk '$3~/[15]$/' reg.txt 
Zhang Xiaoyu    390320151  :155:90:201
Wu    Waiwai    70271111   :250:80:75
Wang  Xiaoai    3515064655 :50:95:135
Li    Youjiu    918391635  :175:75:300
Lao   Nanhai    918391635  :250:100:175
[root@oldboyedu-39-nb files]# awk '$3~/[15]$/{print $1,$2}' reg.txt 
Zhang Xiaoyu
Wu Waiwai
Wang Xiaoai
Li Youjiu
Lao Nanhai
[root@oldboyedu-39-nb files]# awk '$3~/1|5$/{print $1,$2}' reg.txt 
Zhang Dandan
Zhang Xiaoyu
Wu Waiwai
Liu Bingbing
Wang Xiaoai
Zi Gege
Li Youjiu
Lao Nanhai
[root@oldboyedu-39-nb files]# awk '$3~/(1|5)$/{print $1,$2}' reg.txt 
Zhang Xiaoyu
Wu Waiwai
Wang Xiaoai
Li Youjiu
Lao Nanhai







##显示Xiaoyu的捐款.每个值时都有以$开头.如$520$200$135 

####条件 第2列中包含Xiaoyu
####动作 

#####显示最后一列 把:替换为 $
[root@oldboyedu-39-nb files]# awk '$2~/Xiaoyu/' reg.txt 
Zhang Xiaoyu    390320151  :155:90:201
[root@oldboyedu-39-nb files]# awk '$2~/Xiaoyu/{print $NF}' reg.txt 
:155:90:201
[root@oldboyedu-39-nb files]# awk '$2~/Xiaoyu/{print $NF}' reg.txt |tr ":" "$"
$155$90$201

######awk中如何进行替换
##替换  sed s###g    s=====sub
##gsub awk里面的一个函数 把功能做好了 给你使用方法 
##gsub(/找谁/,"替换为什么",在哪一列进行替换)
##gsub(/:/,"$",$NF)
[root@oldboyedu-39-nb files]# awk '{gsub(/:/,"$",$NF); print $0}' reg.txt 
Zhang Dandan 41117397 $250$100$175
Zhang Xiaoyu 390320151 $155$90$201
Meng Feixue 80042789 $250$60$50
Wu Waiwai 70271111 $250$80$75
Liu Bingbing 41117483 $250$100$175
Wang Xiaoai 3515064655 $50$95$135
Zi Gege 1986787350 $250$168$200
Li Youjiu 918391635 $175$75$300
Lao Nanhai 918391635 $250$100$175



#####直接使用 print "$"$4 
5组组长-丛中之  
awk -F "[ :]+" '$2~/Xiaoyu/{print "$"$4,"$"$5,"$"$6}' reg.txt

#####OFS 把内容修改为$

8组--潘立府  
[root@PLF files]# awk -F '[ :]+'  -vOFS="$"  '$2~/Xiaoyu/{print OFS$4,$5,$6}' reg.txt 
$155$90$201




##awk中如何使用正则表达式作为条件
##正则 
## $2 ~/oldboy/
## $2!~/oldboy/ 
###gsub

###2）表示比较  
找出20行到文件的结尾
awk 'NR>=20' reg.txt 

###3）范围：从哪里来,到哪里去                           ******
显示文件的第20到30行 
 sed -n '20,30p' num.txt 
 awk 'NR==20,NR==30' num.txt 
 
#range.log 

cat >/server/files/range.log<<EOF
oldboy is a linuxer.
device: {
oo
oldboy
no sql
this is log
niu niu
}
oldboy
device: {
oldboy
no sql
this is log
niu niu
}
oldboy
device: {
oldboy
no sql
this is log
niu niu
}
device: {
oldboy
no sql
this is log
niu niu
}
EOF

取出 从device:开头到}(右花括号结尾之间的内容)

[root@oldboyedu-39-nb files]# #awk '从哪里来,到哪里去' 
[root@oldboyedu-39-nb files]# awk '/^device:/,/}/' range.log 
device: {
oo
oldboy
no sql
this is log
niu niu
}
device: {
oldboy
no sql
this is log
niu niu
}
device: {
oldboy
no sql
this is log
niu niu
}
device: {
oldboy
no sql
this is log
niu niu
}

[root@oldboyedu-39-nb files]# awk '/{/,/}/' range.log 
device: {
oo
oldboy
no sql
this is log
niu niu
}
device: {
oldboy
no sql
this is log
niu niu
}
device: {
oldboy
no sql
this is log
niu niu
}
device: {
oldboy
no sql
this is log
niu niu
}


##特殊的条件/模式
###BEGIN{}开始
####1.用来定义awk里面的内置变量 FS OFS RS      awk -v 
####2.自己测试

###特点：
####1.BEGIN{}里面的内容，会在awk读取文件之前就运行 。
####2.主要用来显示表头 或自己进行测试


###END结束 ******
####特点及用途： 
#####1.在awk读取完整个文件之后 才会运行END{}里面的内容 
#####2.计算之后 用END显示最终结果
#####3.先处理（计算） END{}显示结果

###题目 统计包含250的行出现了几次。

[root@oldboyedu-39-nb files]# cat reg.txt 
Zhang Dandan    41117397   :250:100:175
Zhang Xiaoyu    390320151  :155:90:201
Meng  Feixue    80042789   :250:60:50
Wu    Waiwai    70271111   :250:80:75
Liu   Bingbing  41117483   :250:100:175
Wang  Xiaoai    3515064655 :50:95:135
Zi    Gege      1986787350 :250:168:200
Li    Youjiu    918391635  :175:75:300
Lao   Nanhai    918391635  :250:100:175



9组组长-李佳豪  
awk '/250/' reg.txt |wc -l

9组-贝知骏  
[root@oldboyedu-muban files]# grep -c '250' reg.txt 
6

#awk计算功能 


i=i+1  ==== i++
i=i+10 ==== i+=10

[root@oldboyedu-39-nb files]# awk '/250/{i++;print i}' reg.txt 
1
2
3
4
5
6
[root@oldboyedu-39-nb files]# awk '/250/{i++}END{print i}' reg.txt 
6
[root@oldboyedu-39-nb files]# #先进行计算，END里面显示结果/输出




7组-徐贵聪  
[root@oldboyedu-39 files]# awk '/Xiaoyu/{print $NF}' reg.txt |sed 's#:#$#g'
$155$90$201
2组组长-李谦  
[root@oldboyedu-39 files]# awk -F "[ :]+" -vOFS=$ '/Xiaoyu/{print "$"$4,$5,$6}' reg.txt
$155$90$201

8组--潘立府  
[root@PLF files]# awk -F '[ :]+'  -vOFS="$"  '$2~/Xiaoyu/{print OFS$4,$5,$6}' reg.txt 
$155$90$201


#######awk总结
#1.执行过程
#2.awk字段（列） 找对 选好分隔符即可 
#3.awk中模式（条件）
##1.正则表达式作为条件
##2.表示范围的条件 
#4.awk特殊条件BEGIN  END(必会)

预习：
网络基础


#1.awk数组
#2.其他的内置变量 NR FS OFS 
#3.其他的函数
#4.循环与判断


















怎么能让i不从0开始加

[root@oldboyedu-39-nb files]# awk -vi=1000 '/250/{i++}END{print i}' reg.txt 
1006
[root@oldboyedu-39-nb files]# awk  'BEGIN{i=100}/250/{i++}END{print i}' reg.txt 
106



;与两个{}输出内容为什么不一样
[root@oldboyedu-39 files]# awk '/250/{i++}{print i}' reg.txt 
1
1
2
3
4
4
5
5
6

#加上多个花括号  每个花括号前面要有条件。
#一个条件加上多个;分号
/250/{i++;print i}
/250/{i++}/250/{print i}